extends ./layout/app.jade

block styles
    style.
        .instructions {
            text-align: center;
            margin-top: 40px;
            font-size: 2em;
        }
        .instructions > img {
          margin: auto !important;
          padding-top: 50px;
        }


block content
    div(class="instructions", id="instructions").
        Scan this via your app in order to continue.

    #game
        #sky
        .mountain
        .ground
        #ground
          div
            .health-bar(data-total='1000', data-value='1000')
              .bar
                .hit
              center
                h2#health
                button#reset(style='display: none') Reset
          #obs
          #car.car
            .tires
            .car-body
          .rightO
          .leftO
          .road
            .lines
            .lines
        script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.2/jquery.min.js')
        script(src='http://cdnjs.cloudflare.com/ajax/libs/gsap/1.18.2/TweenMax.min.js')
        script(src='http://davidshimjs.github.com/qrcodejs/qrcode.min.js');      

    #qrcode
    script(type='text/javascript').
      new QRCode(document.getElementById("instructions"), "http://#{ip}:#{port}/#{id}");
      console.log("http://#{ip}:#{port}/#{id}")
block scripts
    script(src="/socket.io/socket.io.js")
    script.
        window.requestAnimationFrame = (function(){
          return  window.requestAnimationFrame       ||
                  window.webkitRequestAnimationFrame ||
                  window.mozRequestAnimationFrame    ||
                  function( callback ){
                    window.setTimeout(callback, 1000 / 60);
                  };
        })();

        var socket = io.connect('http://#{host}:#{port}/#{id}');

        var game = document.getElementById('game');

        var car = document.getElementById('car');

        car.velocity = {
            x: 0,
            y: 0
        };

        socket.on('connected', function () {
            game.style.display = 'block';
            document.getElementById('instructions').style.display = 'none';
        });



        localStorage['dead'] = 0;
        var hitBtn = $('button.damage'),
        reset = $('button.reset'),
        hBar = $('.health-bar'),
        bar = hBar.find('.bar'),
        hit = hBar.find('.hit');
        $('#health').html($('.health-bar').data('total')/10);

        socket.on('reset', function (data) {
            if(data) {
                alert('reset');
            }
        });
        socket.on('updateBall', function (data) {
            for (var p = 0; p < data.length; p++) {
                car.velocity.x = data[p][1];
                car.velocity.y = data[p][0];
            }
            if(collision($('.car'), $('.rightO')) | collision($('.car'), $('.leftO')) | collision($('.car'), $('.fire'))) {
                if(localStorage['dead'] == 0) {
                    damage();
                }
            }

            function damage() {
                var total = hBar.data('total'),
                    value = hBar.data('value');
                
                if (value < 0) {
                  alert('Dead')
                  return;
                }
                // max damage is essentially quarter of max life
                var damage = 10;
                // damage = 100;
                var newValue = value - damage;
                // calculate the percentage of the total width
                var barWidth = (newValue / total) * 100;
                var hitWidth = (damage / value) * 100 + "%";
                
                // show hit bar and set the width
                hit.css('width', hitWidth);
                hBar.data('value', newValue);
                
                setTimeout(function(){
                  hit.css({'width': '0'});
                  bar.css('width', barWidth + "%");
                }, 300);
                //bar.css('width', total - value);
                if( value <= 0){
                  alert("DEAD");
                  localStorage['dead'] = 1;
                  $('#reset').css({'display': 'block'})
                }else{
                  $('#health').html(newValue/10);
                }
            }
            $('#reset').click(function(e){
                hBar.data('value', hBar.data('total'));

                hit.css({'width': '0'});

                bar.css('width', '100%');

                localStorage['dead'] = 0;

                $('#reset').css({'display': 'none'})

                $('#health').html(100);

                $('.car').offset({left: window.innerWidth/2 - window.innerWidth*8.7/200});
            });

            function collision($div1, $div2) {
              var x1 = $div1.offset().left;
              var y1 = $div1.offset().top;
              var h1 = $div1.outerHeight(true);
              var w1 = $div1.outerWidth(true);
              var b1 = y1 + h1;
              var r1 = x1 + w1;
              var x2 = $div2.offset().left;
              var y2 = $div2.offset().top;
              var h2 = $div2.outerHeight(true);
              var w2 = $div2.outerWidth(true);
              var b2 = y2 + h2;
              var r2 = x2 + w2;

              if (b1 < y2 || y1 > b2 || r1 < x2 || x1 > r2) return false;
              return true;
            }

            console.log(car.velocity);
        });
        car.pos = window.innerWidth/2;
        (function update() {

            car.pos += car.velocity.x;
            car.style.left = car.pos + 'px';
            console.log(car.style.left, 0);

            if (car.pos > (window.innerWidth - 100) && car.velocity.x > 0) {
                car.pos = window.innerWidth - 100;
            }

            if (car.pos < 0 && car.velocity.x < 0) {
                car.pos = 0;
            }


            requestAnimationFrame(update);
        })();


